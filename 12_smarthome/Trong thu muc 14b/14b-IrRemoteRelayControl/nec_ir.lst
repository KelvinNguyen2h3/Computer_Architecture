C51 COMPILER V9.60.7.0   NEC_IR                                                            11/13/2023 10:54:18 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE NEC_IR
OBJECT MODULE PLACED IN .\nec_ir.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\00-libfiles\nec_ir.c OPTIMIZE(8,SPEED) BROWSE INCDIR(..\00-libfiles) 
                    -DEBUG OBJECTEXTEND PRINT(.\nec_ir.lst) TABS(2) OBJECT(.\nec_ir.obj)

line level    source

   1          /***************************************************************************************************
   2                                                        ExploreEmbedded Copyright Notice 
   3          ****************************************************************************************************
   4           * File:   nec_ir.c
   5           * Version: 16.0
   6           * Author: ExploreEmbedded
   7           * Website: http://www.exploreembedded.com/wiki
   8           * Description: NEC IR remote library to decode the Remote Keys.
   9          
  10          This code has been developed and tested on ExploreEmbedded boards.  
  11          We strongly believe that the library works on any of development boards for respective controllers. 
  12          Check this link http://www.exploreembedded.com/wiki for awesome tutorials on 8051,PIC,AVR,ARM,Robotics,RTO
             -S,IOT.
  13          ExploreEmbedded invests substantial time and effort developing open source HW and SW tools, to support con
             -sider 
  14          buying the ExploreEmbedded boards.
  15           
  16          The ExploreEmbedded libraries and examples are licensed under the terms of the new-bsd license(two-clause 
             -bsd license).
  17          See also: http://www.opensource.org/licenses/bsd-license.php
  18          EXPLOREEMBEDDED DISCLAIMS ANY KIND OF HARDWARE FAILURE RESULTING OUT OF USAGE OF LIBRARIES, DIRECTLY OR
  19          INDIRECTLY. FILES MAY BE SUBJECT TO CHANGE WITHOUT PRIOR NOTICE. THE REVISION HISTORY CONTAINS THE INFORMA
             -TION 
  20          RELATED TO UPDATES.
  21           
  22          Permission to use, copy, modify, and distribute this software and its documentation for any purpose
  23          and without fee is hereby granted, provided that this copyright notices appear in all copies 
  24          and that both those copyright notices and this permission notice appear in supporting documentation.
  25          **************************************************************************************************/
  26          
  27          /*************************
  28            NEC IR Remote Codes 
  29          **************************  
  30          0xFFA25D: CH-       
  31          0xFF629D: CH        
  32          0xFFE21D: CH+       
  33          0xFF22DD: PREV      
  34          0xFF02FD: NEXT      
  35          0xFFC23D: PLAY/PAUSE
  36          0xFFE01F: VOL-      
  37          0xFFA857: VOL+      
  38          0xFF906F: EQ        
  39          0xFF6897: 0         
  40          0xFF9867: 100+      
  41          0xFFB04F: 200+      
  42          0xFF30CF: 1         
  43          0xFF18E7: 2         
  44          0xFF7A85: 3         
  45          0xFF10EF: 4         
  46          0xFF38C7: 5         
  47          0xFF5AA5: 6         
  48          0xFF42BD: 7         
  49          0xFF4AB5: 8         
  50          0xFF52AD: 9 
C51 COMPILER V9.60.7.0   NEC_IR                                                            11/13/2023 10:54:18 PAGE 2   

  51          **************************/
  52          
  53          #include <reg51.h>
  54          #include "nec_ir.h"
  55          #include "stdutils.h"
  56          
  57          // NOte: As INTO is used, the IR sendor needs to be connected to P3_2(INTO) pin.
  58          
  59          uint32_t bitPattern=0,newKey=0;
  60          uint8_t timerValue;
  61          uint8_t msCount=0;
  62          char pulseCount=0;
  63          
  64          /* Timer0 ISR to generate 1ms delay*/
  65          void timer0_isr() interrupt 1
  66          {
  67   1          if(msCount<50)
  68   1              msCount++;
  69   1      
  70   1          TH0 = 0xFC;   // Reload the timer value for 1ms Delay
  71   1          TL0 = 0x67;
  72   1      }
  73          
  74          
  75          /*Falling edge INTO to decede the IR pulses
  76          *INT0(P2.2) will be configured as falling Edge interrupt to detect the pulses.
  77          *Timer0(Mode1) will be configured to generate a periodic interrupt of 1ms.
  78          First two transitions will be ignored as they will mark SOF(Start of the frame).
  79          After this continuously 32-bit information will be captured in a variable.
  80          If the pulse width is greater than 2ms then it will be considered as LOGIC-1 else as LOGIC-0. 
  81          If the pulse width is greater than 50ms then it will be considered as SOF(Start of the frame).*/
  82          void externalIntr0_ISR()  interrupt 0
  83          {
  84   1          timerValue = msCount;
  85   1          msCount = 0;
  86   1      
  87   1          TH0 = 0xFC;  // Reload the timer value for 1ms Delay
  88   1          TL0 = 0x67;
  89   1      
  90   1          pulseCount++;
  91   1      
  92   1          if((timerValue>=50)) // If the pulse width is greater than 50ms, this will mark the SOF
  93   1          { 
  94   2              pulseCount = -2; // First 2 counts needs to be skipped hence pulse ocunt is set to -2 
  95   2              bitPattern = 0;
  96   2          }
  97   1          else if((pulseCount>=0) && (pulseCount<32)) //Accumulate the bit values between 0-31.
  98   1          {  
  99   2              if(timerValue>=2)                      //pulse width greater than 2ms is considered as LOGIC1
 100   2              {
 101   3                  bitPattern |=(uint32_t)1<<(31-pulseCount);
 102   3              }
 103   2              else
 104   2              {
 105   3      
 106   3              }
 107   2          }
 108   1          else if(pulseCount>=32)                  //This will mark the End of frame as 32 pulses are received
 109   1          {
 110   2              newKey = bitPattern;                // Copy the newKey(patter) and set the pulse count to 0;
 111   2              pulseCount = 0;
 112   2          }
C51 COMPILER V9.60.7.0   NEC_IR                                                            11/13/2023 10:54:18 PAGE 3   

 113   1      }
 114          
 115          
 116          /**************************************************************************************************
 117                          void IR_RemoteInit()
 118          ***************************************************************************************************
 119           * I/P Arguments:  none
 120           * Return value : none
 121          
 122           * description  :This function is used to the Timer0 for 1ms delay.
 123                           INTO interrupt for Falling edge detetion.
 124                   Also enables the TImer0 and INTO interrupts
 125          **************************************************************************************************/
 126          void IR_RemoteInit(void)
 127          {
 128   1          TMOD |= 0x01;  // Timer0 MODE1(16-bit timer)
 129   1          TH0 = 0xFC;    // Timer value for 1ms at 11.0592Mhz clock
 130   1          TL0 = 0x67;
 131   1          TR0 = 1;       // Start the Timer
 132   1          ET0 = 1;       // Enable the Timer0 Interrupt
 133   1          
 134   1          IT0 = 1;       // Configure INT0 falling edge interrupt
 135   1          EX0 = 1;       // Enable the INT0 External Interrupt
 136   1          
 137   1          EA  = 1;       // Enable the Global Interrupt bit   
 138   1      }
 139          
 140          
 141          uint32_t IR_RemoteGetKey(void)
 142          {
 143   1         uint32_t keyCode;
 144   1         keyCode = newKey;
 145   1         newKey = 0x00;
 146   1      
 147   1         return keyCode;     
 148   1      } 


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    233    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     11       4
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
